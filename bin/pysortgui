#!/usr/bin/env python
'''
Created on Mar 9, 2016

@author: harry
'''
# import logging
# import os
import sys
from subprocess import call

from PyQt5.QtWidgets import QApplication

from pysortgui.main import launch_app

# from spikesortergl import main_window
# import pdb
# from PyQt4 import QtCore, QtGui


if __name__ == "__main__":
    launch_app()

# # setting up logger
# # attaching handler to the spikesorter logger
# # setting level of the root logger to INFO
# logging.getLogger().setLevel('INFO')
# app_dict = main_window.main()
# arguments = app_dict['app_arguments']

# # pdb.set_trace()
# if arguments.file_name:
#     if os.path.isfile(arguments.file_name):
#         try:
#             cmb_curr_data_file = app_dict['spikesorter'].children_dict['data_toolbox'].children_dict[
#                 'data_browser'].cmb_curr_data_file
#             cmb_curr_data_file.insertItem(0, arguments.file_name)
#             cmb_curr_data_file.setCurrentIndex(0)
#         except Exception:
#             main_window.logger.warning(
#                 'Could not load file {}'.format(arguments.file_name))

#     if arguments.channel:
#         try:
#             data_browser = app_dict['spikesorter'].children_dict['data_toolbox'].children_dict[
#                 'data_browser']
#             model = data_browser.tv_data.model()
#             smodel = data_browser.tv_data.selectionModel()
#             item = data_browser.tv_data.model().findItems(
#                 str(arguments.channel), QtCore.Qt.MatchRecursive)[0]
#             smodel.select(smodel.selection(),
#                           QtGui.QItemSelectionModel.Deselect)
#             smodel.setCurrentIndex(
#                 item.index(), QtGui.QItemSelectionModel.Select)
#             data_browser.pb_manualsort_chan.released.emit()
#             del smodel
#             del model
#         except Exception:
#             main_window.logger.warning(
#                 'Could not load channel {}'.format(arguments.channel))


# if arguments.root_dir:
#     if os.path.isdir(arguments.root_dir):
#         cmb_curr_folder = app_dict['spikesorter'].children_dict[
#             'data_toolbox'].children_dict['file_browser'].cmb_curr_folder
#         cmb_curr_folder.insertItem(0, arguments.root_dir)
#         cmb_curr_folder.setCurrentIndex(0)


# def app_into_namespace(app_dict):
#     for app in app_dict:
#         cmd = "{} = app_dict['{}']".format(app, app)
#         print(cmd)
#         # exec cmd in globals()
#         exec(cmd, globals())


# def in_interactive_inspect_mode():
#     from ctypes import POINTER, c_int, cast, pythonapi
#     """Whether '-i' option is present or PYTHONINSPECT is not empty."""
#     if os.environ.get('PYTHONINSPECT'):
#         return True
#     iflag_ptr = cast(pythonapi.Py_InteractiveFlag, POINTER(c_int))
#     # NOTE: in Python 2.6+ ctypes.pythonapi.Py_InspectFlag > 0
#     #      when PYTHONINSPECT set or '-i' is present
#     return iflag_ptr.contents.value != 0


# if arguments.interactive or in_interactive_inspect_mode():

#     import rlcompleter
#     import readline
#     readline.parse_and_bind('tab:complete')
#     os.environ['PYTHONINSPECT'] = '1'
#     app_dict.update(app_dict['spikesorter'].children_dict)
#     app_dict.update(
#         app_dict['spikesorter'].children_dict['data_toolbox'].children_dict)
#     app_into_namespace(app_dict=app_dict)
#     # @UndefinedVariable
#     raw_scope = raw_widget.children_dict['raw_widget_list'][0]


# if not in_interactive_inspect_mode() and not arguments.interactive:
#     sys.exit(app_dict['qt_app'].exec_())
#     # setting the logger level to debug
#     logging.getLogger().setLevel('DEBUG')
